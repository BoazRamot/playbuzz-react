{"version":3,"sources":["logo.png","components/Header/Header.tsx","components/Question/Question.tsx","components/QuizCard/QuizCard.tsx","pages/Home/Home.tsx","components/ProgressBar/ProgressBar.tsx","pages/Summary/Summary.tsx","pages/QuizPage/QuizPage.tsx","models/Quiz.ts","store/quizzes.data.reducer.ts","store/quizzes.api.middleware.ts","pages/App/App.tsx","serviceWorker.ts","store/localStorage.ts","store/configureStore.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","connect","dispatch","reset","type","_ref","onClick","react_default","a","createElement","AppBar","position","className","Toolbar","src","logo","alt","Grid","container","direction","justify","alignItems","spacing","react_router_dom","exact","to","activeClassName","Typography","variant","withRouter","state","index","questionIndex","quizzes","onNext","answerScore","gotoSummery","payload","id","findIndex","i","questions","length","quiz","find","optionalAnswers","options","map","item","ListItem","button","key","bind","value","ListItemText","text","question","List","lastIndex","finishQuizNow","imgSrc","name","title","_ref$short","short","Card","CardActionArea","CardContent","gutterBottom","component","color","components_Question_Question","CardActions","Button","size","concat","useEffect","q","xs","components_QuizCard_QuizCard","process","ProgressBar","counter","MobileStepper","steps","activeStep","nextButton","backButton","Summary","score","resultItem","result","shuffled","getQuiz","isShuffled","setShuffled","match","window","addEventListener","console","log","params","array","tempVal","randomIndex","currentIndex","Math","floor","random","shuffle","pages_Summary_Summary","components_ProgressBar_ProgressBar","Quiz","spec","Object","classCallCheck","this","quizzesDataReducer","arguments","undefined","action","toConsumableArray","objectSpread","quizzesMdl","next","forEach","fetch","then","res","json","data","catch","e","error","getData","jsonFilesString","getQuizzes","theme","createMuiTheme","palette","primary","main","ThemeProvider","components_Header_Header","react_router","path","QuizPage","Home","render","Boolean","location","hostname","loadState","serializedState","localStorage","getItem","JSON","parse","err","questionsInitState","questionReducer","scoresInitState","scoreReducer","store","middlewareEnhancer","applyMiddleware","persistedState","rootReducer","combineReducers","createStore","configureStore","subscribe","throttle","stringify","setItem","_unused","saveState","getState","ReactDOM","es","pages_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9708046a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.96be9e59.png\";","import React from 'react';\r\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\r\nimport logo from '../../logo.png';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ninterface IProps {\r\n  reset: Function;\r\n}\r\n\r\nconst Header: React.FC<IProps> = ({reset}) => {\r\n  const onClick = () => {\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <AppBar position=\"static\" className=\"app-bar\">\r\n        <Toolbar>\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <Grid container\r\n                direction=\"row\"\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                spacing={5}\r\n          >\r\n            <NavLink exact to=\"/\" className=\"nav-link\" activeClassName=\"nav-link-active\" onClick={onClick}>\r\n              <Typography variant=\"h6\" className=\"mx-3 cursor-pointer\">\r\n                Home\r\n              </Typography>\r\n            </NavLink>\r\n            <NavLink exact to=\"/quiz/q1\" className=\"nav-link\" activeClassName=\"nav-link-active\" onClick={onClick}>\r\n              <Typography variant=\"h6\" className=\"mx-3 cursor-pointer\">\r\n                Quiz 1\r\n              </Typography>\r\n            </NavLink>\r\n            <NavLink exact to=\"/quiz/q2\" className=\"nav-link\" activeClassName=\"nav-link-active\" onClick={onClick}>\r\n              <Typography variant=\"h6\" className=\"mx-3 cursor-pointer\">\r\n                Quiz 2\r\n              </Typography>\r\n            </NavLink>\r\n            <NavLink exact to=\"/quiz/q3\" className=\"nav-link\" activeClassName=\"nav-link-active\" onClick={onClick}>\r\n              <Typography variant=\"h6\" className=\"mx-3 cursor-pointer\">\r\n                Quiz 3\r\n              </Typography>\r\n            </NavLink>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </header>\r\n  )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  reset: () => {\r\n    dispatch({type: 'RESET_QUESTION_INDEX'});\r\n    dispatch({type: 'RESET_SCORE'});\r\n  }\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport {List, ListItem, ListItemText} from \"@material-ui/core\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from 'redux';\r\nimport {IOptions} from \"../../models/IOptions\";\r\nimport {Quiz} from \"../../models/Quiz\";\r\nimport {IRootState} from \"../../store/configureStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\n\r\ninterface IProps {\r\n  id: string;\r\n  index: number;\r\n  quizzes: Array<Quiz>;\r\n  onNext: Function;\r\n}\r\n\r\nconst Question: React.FC<IProps & RouteComponentProps> = ({id, index, quizzes, onNext}) => {\r\n\r\n  const onClick = (answerScore: number) => {\r\n    const gotoSummery = quizzes[quizzes.findIndex(i => i.id === id)].questions.length - 1 === index;\r\n    onNext(answerScore, gotoSummery);\r\n  };\r\n\r\n  const quiz = quizzes.find((i: any) => i.id === id) || quizzes[index];\r\n\r\n  const optionalAnswers = quiz.questions[index].options.map((item: IOptions, index: number) => (\r\n    <ListItem button key={index} onClick={onClick.bind(null, item.value)}>\r\n      <ListItemText>{item.text}</ListItemText>\r\n    </ListItem>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"Question\">\r\n      <h1>{quiz.questions[index].question}</h1>\r\n      <List className=\"Question-options\">\r\n        {optionalAnswers}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => {\r\n  return {\r\n    index: state.questionIndex.questionIndex,\r\n    quizzes: state.quizzes,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onNext: (answerScore: number, gotoSummery: boolean) => {\r\n    dispatch({type: 'ADVANCE_SCORE', payload: answerScore});\r\n    if (!gotoSummery) {\r\n      dispatch({type: 'ADVANCE_QUESTION'});\r\n    } else {\r\n      dispatch({type: 'SET_LAST_INDEX'});\r\n    }\r\n  }\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Question));","import React from 'react';\r\nimport {Button, Card, CardActionArea, CardActions, CardContent, Typography} from '@material-ui/core';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Question from '../../components/Question/Question';\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {IRootState} from \"../../store/configureStore\";\r\n\r\ninterface IProps {\r\n  imgSrc: string;\r\n  name: string;\r\n  text?: string;\r\n  title?: string;\r\n  short?: boolean\r\n  id: string;\r\n  lastIndex: boolean;\r\n  reset: Function;\r\n  finishQuizNow: Function;\r\n}\r\n\r\nconst QuizCard: React.FC<IProps> = ({ imgSrc, id, name, text, title, lastIndex, reset, finishQuizNow, short = false }) => {\r\n  const onClick = () => {\r\n    reset();\r\n  };\r\n\r\n  const finish = () => {\r\n    finishQuizNow()\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardActionArea>\r\n        <img\r\n          className={(short) ? 'quiz-image-small' : 'quiz-image-large'}\r\n          src={imgSrc}\r\n          title={name}\r\n          alt=\"Quiz\"\r\n        />\r\n        <CardContent>\r\n          {/*for Home*/}\r\n          {short &&\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {name}\r\n          </Typography>\r\n          }\r\n          {/*for QuizPage*/}\r\n          {(!short) && (!lastIndex) &&\r\n          <Typography variant=\"body2\" color=\"textPrimary\" component=\"div\">\r\n            <Question id={id}/>\r\n          </Typography>\r\n          }\r\n          {/*for Summary*/}\r\n          {!short && lastIndex &&\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {title}\r\n          </Typography>\r\n          }\r\n          {!short && lastIndex &&\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n            {text}\r\n          </Typography>\r\n          }\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        {/*for QuizPage*/}\r\n        {(!short) && (!lastIndex) &&\r\n        <Button size=\"small\" color=\"primary\" onClick={finish}>\r\n          Go to summary now\r\n        </Button>\r\n        }\r\n        {/*for Home*/}\r\n        {short && id &&\r\n        <RouterLink to={`/quiz/${id}`}>\r\n          <Button size=\"small\" color=\"primary\">\r\n            See full quiz\r\n          </Button>\r\n        </RouterLink>\r\n        }\r\n        {/*for Summary*/}\r\n        {!short && lastIndex &&\r\n        <RouterLink to={\"/\"}>\r\n          <Button size=\"small\" color=\"primary\">\r\n            Home\r\n          </Button>\r\n        </RouterLink>\r\n        }\r\n        {!short && lastIndex &&\r\n        <RouterLink to={`/quiz/${id}`}>\r\n          <Button size=\"small\" color=\"primary\" onClick={onClick}>\r\n            Restart quiz\r\n          </Button>\r\n        </RouterLink>\r\n        }\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n    lastIndex: state.questionIndex.lastIndex,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  reset: () => {\r\n    dispatch({type: 'RESET_QUESTION_INDEX'});\r\n    dispatch({type: 'RESET_SCORE'});\r\n  },\r\n  finishQuizNow: () => {\r\n    dispatch({type: 'SET_LAST_INDEX'});\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCard);","import React, {useEffect} from 'react';\r\nimport QuizCard from \"../../components/QuizCard/QuizCard\";\r\nimport {connect} from \"react-redux\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Quiz} from \"../../models/Quiz\";\r\nimport {IRootState} from \"../../store/configureStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ninterface IProps {\r\n  quizzes: Array<Quiz>;\r\n  reset: Function;\r\n}\r\n\r\nconst Home: React.FC<IProps> = ({quizzes, reset}) => {\r\n  useEffect(() => {\r\n    reset();\r\n  });\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      {\r\n        quizzes.map((q: Quiz) => (\r\n          <Grid item xs={6} key={q.id}>\r\n            <QuizCard\r\n              imgSrc={`${process.env.PUBLIC_URL}/img/${q.imgSrc}`}\r\n              id={q.id}\r\n              name={q.title}\r\n              short={true}\r\n            />\r\n          </Grid>\r\n        ))\r\n      }\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  quizzes: state.quizzes\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  reset: () => {\r\n    dispatch({type: 'RESET_QUESTION_INDEX'});\r\n    dispatch({type: 'RESET_SCORE'});\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  length: number;\r\n}\r\n\r\nconst ProgressBar: React.FC<IProps> = ({index, length}) => {\r\n  let counter = index;\r\n\r\n  return (\r\n    <header>\r\n      <MobileStepper\r\n        variant=\"progress\"\r\n        steps={length}\r\n        position=\"static\"\r\n        activeStep={index}\r\n        nextButton={<Button>out of {length}</Button>}\r\n        backButton={<Button>current question {counter + 1}</Button>}\r\n      />\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport QuizCard from '../../components/QuizCard/QuizCard';\r\nimport {Quiz} from \"../../models/Quiz\";\r\n\r\ninterface IProps {\r\n  id: string;\r\n  score: number;\r\n  quiz: Quiz;\r\n}\r\n\r\nconst Summary: React.FC<IProps> = ({id, score, quiz}) => {\r\n  const resultItem: any = quiz ? quiz.result.find(i => score <= i.score) : '';\r\n\r\n  return (!quiz) ? null :(\r\n    <QuizCard\r\n      id={id}\r\n      imgSrc={`/img/${resultItem.imgSrc}`}\r\n      name={quiz.title}\r\n      title={resultItem.title}\r\n      text={resultItem.text}\r\n    />\r\n  )\r\n};\r\n\r\nexport default Summary;","import React, {useEffect} from 'react';\r\nimport QuizCard from '../../components/QuizCard/QuizCard';\r\nimport {IRootState} from '../../store/configureStore';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {Quiz} from \"../../models/Quiz\";\r\nimport ProgressBar from \"../../components/ProgressBar/ProgressBar\";\r\nimport Summary from \"../Summary/Summary\";\r\nimport {Dispatch} from \"redux\";\r\nimport {IQuestions} from \"../../models/IQuestions\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  lastIndex: boolean;\r\n  shuffled: boolean;\r\n  score: number;\r\n  getQuiz: Function;\r\n  reset: Function;\r\n  isShuffled: Function;\r\n  setShuffled: Function;\r\n}\r\n\r\nconst QuizPage: React.FC<IProps & RouteComponentProps> = ({index, lastIndex, shuffled, score, getQuiz, reset, isShuffled, setShuffled, match}) => {\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"popstate\", () => {\r\n      console.log('QuizPage useEffect')\r\n      isShuffled(false);\r\n      reset();\r\n    });\r\n  }, [reset, isShuffled]);\r\n\r\n  const id = (match.params as {id: string}).id;\r\n  const quiz:Quiz = getQuiz(id);\r\n\r\n  const shuffle = (array: Array<IQuestions>) => {\r\n    let currentIndex = array.length;\r\n    let tempVal;\r\n    let randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      tempVal = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = tempVal;\r\n    }\r\n    isShuffled(true);\r\n  };\r\n\r\n  if (quiz && !shuffled) {\r\n    console.log('shuffleQuestions if if if');\r\n    shuffle(quiz.questions);\r\n    setShuffled(quiz);\r\n    isShuffled(true);\r\n  }\r\n\r\n  if (lastIndex) {\r\n    return <Summary id={id} score={score} quiz={quiz}/>;\r\n  }\r\n\r\n  return (!quiz) ? null :(\r\n    <div>\r\n      <ProgressBar\r\n        index={index}\r\n        length={quiz.questions.length}\r\n      />\r\n      <QuizCard\r\n        id={id}\r\n        name={quiz.title}\r\n        imgSrc={`${process.env.PUBLIC_URL}/img/${quiz.questions[index].imgSrc}`}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => ({\r\n  index: state.questionIndex.questionIndex,\r\n  lastIndex: state.questionIndex.lastIndex,\r\n  shuffled: state.questionIndex.shuffled,\r\n  score: state.score.score,\r\n  getQuiz: (id: string) => (state.quizzes.find(q => q.id === id)),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  reset: () => {\r\n    dispatch({type: 'RESET_QUESTION_INDEX'});\r\n    dispatch({type: 'RESET_SCORE'});\r\n  },\r\n  isShuffled: (value: boolean) => {\r\n    dispatch({type: 'SET_QUESTION_SHUFFLE', payload: value})\r\n  },\r\n  setShuffled: (value: Quiz) => {\r\n    dispatch({type: 'SET_SHUFFLED_QUESTIONS', payload: value})\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizPage);","import {IResult} from \"./IResult\";\r\nimport {IQuestions} from \"./IQuestions\";\r\n\r\nexport class Quiz {\r\n  public id: string;\r\n  public imgSrc: string;\r\n  public title: string;\r\n  public result: Array<IResult>;\r\n  public questions: Array<IQuestions>;\r\n\r\n  constructor(spec: any) {\r\n    this.id = spec.id;\r\n    this.imgSrc = spec.imgSrc;\r\n    this.title = spec.title;\r\n    this.result = spec.result;\r\n    this.questions = spec.questions;\r\n  }\r\n}","import {Quiz} from '../models/Quiz';\r\n\r\nconst QUIZZES_DATA_SET = '[QUIZZES] DATA_SET';\r\n\r\n// actions types\r\ninterface quizSetAllAction {\r\n  type: typeof QUIZZES_DATA_SET;\r\n  payload: Quiz;\r\n}\r\n\r\ntype quizzesDataActionTypes = quizSetAllAction\r\n\r\n// actions factories\r\nexport const quizzesDataSet = (payload: Quiz): quizzesDataActionTypes => {\r\n  return {\r\n    type: QUIZZES_DATA_SET,\r\n    payload\r\n  }\r\n};\r\n\r\nconst quizzesDataReducer = (state: Array<Quiz> = [], action: any) => {\r\n  switch (action.type) {\r\n    case QUIZZES_DATA_SET:\r\n      return [...state, action.payload];\r\n\r\n    case 'SET_SHUFFLED_QUESTIONS':\r\n      return state.map((item) => {\r\n        if (item.id !== action.payload.id) {\r\n          return item;\r\n        } else {\r\n          return {\r\n            ...item, questions: action.payload.questions\r\n          }\r\n        }\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default quizzesDataReducer;\r\n","import {Dispatch, Middleware, MiddlewareAPI} from 'redux';\r\nimport {Quiz} from '../models/Quiz';\r\nimport {quizzesDataSet} from './quizzes.data.reducer';\r\nimport {IQuiz} from \"../models/IQuiz\";\r\n\r\nconst QUIZZES_API_GET_QUIZZES = '[QUIZZES API] GET_QUIZZES';\r\n\r\n// actions types\r\ninterface getQuizzesAction {\r\n  type: typeof QUIZZES_API_GET_QUIZZES;\r\n  payload: Array<string>;\r\n}\r\n\r\n// actions factories\r\nexport const getQuizzes = (jsonFilesString: Array<string>): getQuizzesAction => {\r\n  return {\r\n    type: QUIZZES_API_GET_QUIZZES,\r\n    payload: jsonFilesString\r\n  }\r\n};\r\n\r\nconst getQuizzesFlow:Middleware = ({dispatch}: MiddlewareAPI) => (next: Dispatch) => action => {\r\n  if (action.type === QUIZZES_API_GET_QUIZZES) {\r\n    action.payload.forEach((item: string) => {\r\n      fetch(process.env.PUBLIC_URL + item)\r\n        .then(res => res.json())\r\n        .then((data: IQuiz) => {\r\n          const quiz = new Quiz(data);\r\n          dispatch(quizzesDataSet(quiz));\r\n        })\r\n        .catch((e) => {\r\n          console.error('Quizzes Fetch failed', e)\r\n        })\r\n    });\r\n  }\r\n  return next(action);\r\n};\r\n\r\nexport const quizzesMdl = getQuizzesFlow;\r\n","import React, {useEffect} from 'react';\nimport './App.scss';\nimport {createMuiTheme} from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/styles';\nimport {Route, Switch} from 'react-router';\nimport Header from \"../../components/Header/Header\";\nimport Home from '../Home/Home';\nimport QuizPage from '../QuizPage/QuizPage';\nimport {getQuizzes} from \"../../store/quizzes.api.middleware\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {IRootState} from \"../../store/configureStore\";\nimport {Quiz} from \"../../models/Quiz\";\n\ninterface IProp {\n  quizzes: Array<Quiz>;\n  getData: Function;\n}\n\nconst App: React.FC<IProp> = ({quizzes, getData}) => {\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: '#104DA1'\n      }\n    },\n  });\n\n  useEffect(() => {\n    const jsonFilesString = ['/data/q1.json', '/data/q2.json', '/data/q3.json'];\n    if (quizzes.length === 0) {\n      getData(jsonFilesString);\n    }\n  }, [getData, quizzes.length]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Header/>\n      <main className=\"p-3 App-main\">\n        <Switch>\n          <Route path=\"/quiz/:id\" component={QuizPage}/>\n          <Route path=\"/\" component={Home}/>\n          <Route render={() => 'Page not found'}/>\n        </Switch>\n      </main>\n    </ThemeProvider>\n  );\n};\n\nconst mapStateToProps = (state: IRootState) => ({\n  quizzes: state.quizzes\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  getData: (jsonFilesString: Array<string>) => dispatch(getQuizzes(jsonFilesString)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state: any) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport quizzesDataReducer from './quizzes.data.reducer';\r\nimport {quizzesMdl} from './quizzes.api.middleware';\r\nimport {Quiz} from \"../models/Quiz\";\r\nimport {loadState} from \"./localStorage\";\r\n\r\nexport interface IRootState {\r\n  questionIndex: IQuestions;\r\n  score: IScore;\r\n  quizzes: Array<Quiz>;\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: any;\r\n}\r\n\r\ninterface IQuestions {\r\n  questionIndex: number;\r\n  lastIndex: boolean;\r\n  shuffled: boolean;\r\n}\r\n\r\nconst questionsInitState = {\r\n  questionIndex: 0,\r\n  lastIndex: false,\r\n  shuffled: false,\r\n};\r\n\r\nconst questionReducer = (state = questionsInitState, action: Action) => {\r\n  switch (action.type) {\r\n    case 'ADVANCE_QUESTION':\r\n      return {\r\n        ...state,\r\n        questionIndex: state.questionIndex + 1\r\n      };\r\n\r\n    case 'SET_LAST_INDEX':\r\n      return {\r\n        ...state,\r\n        lastIndex: true\r\n      };\r\n\r\n    case 'SET_QUESTION_SHUFFLE':\r\n      return {\r\n        ...state,\r\n        shuffled: action.payload\r\n      };\r\n\r\n    case 'RESET_QUESTION_INDEX':\r\n      return {...questionsInitState};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ninterface IScore {\r\n  score: number;\r\n}\r\n\r\nconst scoresInitState = {\r\n  score: 0,\r\n};\r\n\r\nconst scoreReducer = (state = scoresInitState, action: Action) => {\r\n  switch (action.type) {\r\n\r\n    case 'ADVANCE_SCORE':\r\n      return {\r\n        ...state,\r\n        score: state.score + action.payload\r\n      };\r\n\r\n    case 'RESET_SCORE':\r\n      return {...scoresInitState};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function configureStore() {\r\n  const middlewareEnhancer = applyMiddleware(quizzesMdl);\r\n  const persistedState = loadState();\r\n\r\n  const rootReducer = combineReducers({\r\n    questionIndex: questionReducer,\r\n    score: scoreReducer,\r\n    quizzes: quizzesDataReducer,\r\n  });\r\n\r\n  return createStore(rootReducer, persistedState, middlewareEnhancer)\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from \"./store/configureStore\";\nimport {saveState} from \"./store/localStorage\";\nimport {throttle} from 'lodash'\n\nconst store = configureStore();\nstore.subscribe(throttle(() => {\n  saveState({\n    questionIndex: store.getState().questionIndex,\n    score: store.getState().score,\n    quizzes: store.getState().quizzes\n  });\n}, 1000));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App/>\n    </Router>\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}